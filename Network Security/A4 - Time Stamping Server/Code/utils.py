import socket
import hashlib
import datetime

n = 1540403998752603460169663084956818529106187359883066297260947885258291791426687536111326502647081605102674363869515288304963633526985040693410922972148620283359679180129986537419675146777029550197653282363437820009028510657401284990508766825769709151475243057870036207221530539314964836141709295681474723439912225880917120375200664963251461722638264374389404253976601276871846754760079036171135420326842828289405580673372951446668047836124349495014986989017659049018838946575222256358866248436514283815143581333912319297045672805011587345357093316662008966193848536148779634970377670521686102346015034468755020256095973842517810331314052698204909474394986180719699029621446263933281952790688162402569273462195925691795690925575657115666546211673284966143475006506983986361695306696142655098877825804865159408890533830021495009639898589099988888651150700669260911306654471774822863650389696786710970586206265582778752941490245139314771134031600082543089793861031451897924962751198945348643395631398489817808014689456777434179216532970269506218651115227617211539781140242235527533625452030917765534188590897156377914049007549253511021030210768497796021297703639169302798945826996642912776191722790173083321104860502243117363506787297415520482527473254533443106162906746199548178013635541682702107594470273789073383485175627840394482251448153342377292875487455927831913435312336933078770660054408771847662636162850980492350495429369871682231947494483377906233418438032452685395242425861645712128746597019779547553546295546882872807650745598143683390954275148747380018667709771784278716391961409460686455832283444969110400600067662577839581100159470752272087443941458561814806431013557699812150871027202557825324807040274454264803099092565798928657287537964788579459213176308683318553916825486135681295871308857346453134824675802523096399522361536582358285415728944406641655538122437424726100277256616566973568272960471629875938720326582354206459267565302521096071628888953462919474074455430755900258627768033994419012983931

PU_SERVER = 419007633753249358163371317520192208024352885070865054318259957799640820272617869666750277036856988452476999386313
PU_CLIENT = 158489348971613141575887740685910623732002956746326644645760871238192881522209474940079

SERVER_PORT = 15000
SEPERATOR = "λλλ"


def setup_server(port):
    localIP = "127.0.0.1"
    localPort = port
    UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
    UDPServerSocket.bind((localIP, localPort))

    print("UDP server up and listening on port", port)

    return UDPServerSocket


def listen(udp_socket):
    bufferSize = 1024
    bytesAddressPair = udp_socket.recvfrom(bufferSize)
    message, address = bytesAddressPair
    return message.decode(), address


def udp_client():
    UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
    return UDPClientSocket


def send_message(udp_socket, message, port):
    serverAddressPort = ("127.0.0.1", port)
    udp_socket.sendto(message.encode(), serverAddressPort)


def apply_rsa(msg_text, key):
    msg_int = encode_char(msg_text)
    msg_int = int(msg_int)
    rsa = pow(msg_int, key, n)
    convert_back = decode_char(rsa)
    return convert_back


def encrypt_text(msg_text, PU):
    return apply_rsa(msg_text, PU)


def decrypt_text(msg_text, PR):
    return apply_rsa(msg_text, PR)


def encode_char(msg_text):
    res = ''
    for c in msg_text:
        res += encodings[c]

    return res


def decode_char(msg_int):
    msg_test = str(msg_int)
    l = len(msg_test)
    if l & 1:
        msg_test = '0' + msg_test

    res = ''
    for i in range(0, len(msg_test), 2):
        num = msg_test[i:i + 2]
        char = decodings[num]
        res += char

    return res


def hash_function(message):
    return hashlib.sha3_224(message.encode()).hexdigest()


def get_datetime():
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


encodings = {'φ': '00', 'ω': '01', 'β': '02', 'δ': '03', 'ε': '04', 'π': '05', 'Σ': '06', 'λ': '07', 'μ': '08',
             '`': '09',
             '!': '10', '@': '11', '#': '12', '$': '13', '%': '14', '^': '15', '&': '16', '*': '17', '(': '18',
             ')': '19', '-': '20', '_': '21', '+': '22', '=': '23', '{': '24', '}': '25', '[': '26', ']': '27',
             ':': '28', ';': '29', '<': '30', '>': '31', '.': '32', ',': '33', '?': '34', '/': '35', ' ': '36',
             '~': '37', 'a': '38', 'b': '39', 'c': '40', 'd': '41', 'e': '42', 'f': '43', 'g': '44', 'h': '45',
             'i': '46', 'j': '47', 'k': '48', 'l': '49', 'm': '50', 'n': '51', 'o': '52', 'p': '53', 'q': '54',
             'r': '55', 's': '56', 't': '57', 'u': '58', 'v': '59', 'w': '60', 'x': '61', 'y': '62', 'z': '63',
             '0': '64', '1': '65', '2': '66', '3': '67', '4': '68', '5': '69', '6': '70', '7': '71', '8': '72',
             '9': '73', 'A': '74', 'B': '75', 'C': '76', 'D': '77', 'E': '78', 'F': '79', 'G': '80', 'H': '81',
             'I': '82', 'J': '83', 'K': '84', 'L': '85', 'M': '86', 'N': '87', 'O': '88', 'P': '89', 'Q': '90',
             'R': '91', 'S': '92', 'T': '93', 'U': '94', 'V': '95', 'W': '96', 'X': '97', 'Y': '98', 'Z': '99'}

decodings = {'00': 'φ', '01': 'ω', '02': 'β', '03': 'δ', '04': 'ε', '05': 'π', '06': 'Σ', '07': 'λ', '08': 'μ',
             '09': '`',
             '10': '!', '11': '@', '12': '#', '13': '$', '14': '%', '15': '^', '16': '&', '17': '*', '18': '(',
             '19': ')', '20': '-', '21': '_', '22': '+', '23': '=', '24': '{', '25': '}', '26': '[', '27': ']',
             '28': ':', '29': ';', '30': '<', '31': '>', '32': '.', '33': ',', '34': '?', '35': '/', '36': ' ',
             '37': '~', '38': 'a', '39': 'b', '40': 'c', '41': 'd', '42': 'e', '43': 'f', '44': 'g', '45': 'h',
             '46': 'i', '47': 'j', '48': 'k', '49': 'l', '50': 'm', '51': 'n', '52': 'o', '53': 'p', '54': 'q',
             '55': 'r', '56': 's', '57': 't', '58': 'u', '59': 'v', '60': 'w', '61': 'x', '62': 'y', '63': 'z',
             '64': '0', '65': '1', '66': '2', '67': '3', '68': '4', '69': '5', '70': '6', '71': '7', '72': '8',
             '73': '9', '74': 'A', '75': 'B', '76': 'C', '77': 'D', '78': 'E', '79': 'F', '80': 'G', '81': 'H',
             '82': 'I', '83': 'J', '84': 'K', '85': 'L', '86': 'M', '87': 'N', '88': 'O', '89': 'P', '90': 'Q',
             '91': 'R', '92': 'S', '93': 'T', '94': 'U', '95': 'V', '96': 'W', '97': 'X', '98': 'Y', '99': 'Z'}


if __name__ == '__main__':
    print(len(str(n))//2-2)
